#!/usr/bin/env python3
import subprocess


def get_diff():
    try:
        diff = subprocess.check_output(["git", "diff", "--cached"], text=True)[:10000]
        if not diff.strip():
            print("No staged changes to commit.")
            exit(1)
        return diff
    except subprocess.CalledProcessError:
        print("Error: Unable to get git diff. Are you in a Git repository?")
        exit(1)
    except FileNotFoundError:
        print("Error: Git is not installed or not found.")
        exit(1)


def analyze_diff(diff):
    if diff.startswith("+++") or "new file mode" in diff:
        return "‚ú®", "feat"
    elif diff.startswith("---") and "deleted file mode" in diff:
        return "üî•", "chore"
    elif any(
        line.startswith("+") or line.startswith("-") for line in diff.splitlines()
    ):
        return "üêõ", "fix"
    else:
        return "üìù", "docs"


def generate_commit_description(diff):
    prompt = f"Generate a short description (max 50 characters) for these Git changes:\n{diff}"
    try:
        result = subprocess.check_output(["tgpt", prompt], text=True)
        return result.strip()[:50]
    except subprocess.CalledProcessError:
        print("Error: Failed to generate description with tgpt.")
        exit(1)
    except FileNotFoundError:
        print("Error: tgpt is not installed or not found in PATH.")
        exit(1)


def build_commit_message(diff):
    emoji, commit_type = analyze_diff(diff)
    description = generate_commit_description(diff)
    message = f"{emoji} ({commit_type}): {description}\n\n"
    message += "Versions: v1.0.0\n"
    message += "Languages: Python\n"
    message += "About: AI-powered commit tool"
    return message


def main():
    diff = get_diff()
    commit_message = build_commit_message(diff)
    print(f"Generated commit message:\n{commit_message}")
    confirm = input("Do you want to use this message? (y/n): ").lower()
    if confirm == "y":
        try:
            subprocess.run(["git", "commit", "-m", commit_message], check=True)
            print("Commit successful!")
        except subprocess.CalledProcessError:
            print("Error: Failed to commit changes.")
            exit(1)
    else:
        print("Commit cancelled.")


if __name__ == "__main__":
    main()
