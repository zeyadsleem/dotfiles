#!/bin/bash

# Enable error handling
set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    echo -e "${BLUE}[DEBUG]${NC} $1"
}

# Get current user
get_current_user() {
    if [ "$EUID" -eq 0 ]; then
        echo "$SUDO_USER"
    else
        echo "$USER"
    fi
}

CURRENT_USER=$(get_current_user)
if [ -z "$CURRENT_USER" ]; then
    log_error "Unable to retrieve username"
    exit 1
fi

# Define configuration file paths using the actual user's home directory
STORAGE_FILE="/home/${CURRENT_USER}/.config/Cursor/User/globalStorage/storage.json"
BACKUP_DIR="/home/${CURRENT_USER}/.config/Cursor/User/globalStorage/backups"

# Check permissions
check_permissions() {
    if [ "$EUID" -ne 0 ]; then
        log_error "Please run this script with sudo"
        echo "Example: sudo $0"
        exit 1
    fi
}

# Check and terminate Cursor processes using procs and rg
check_and_kill_cursor() {
    log_info "Checking for Cursor processes..."

    local attempt=1
    local max_attempts=5

    get_process_details() {
        log_debug "Fetching details for Cursor processes:"
        procs --no-header | rg -i "cursor" | rg -v "$(basename "$0")|grep|procs|rg|fzf"
    }

    while [ $attempt -le $max_attempts ]; do
        CURSOR_PIDS=$(procs --no-header | rg -i "cursor" | rg -v "$(basename "$0")|grep|procs|rg|fzf" | awk '{print $1}' || true)

        if [ -z "$CURSOR_PIDS" ]; then
            log_info "No running Cursor processes found"
            return 0
        fi

        log_warn "Cursor processes are currently active"
        get_process_details

        log_warn "Attempting to terminate Cursor processes..."

        if [ $attempt -eq $max_attempts ]; then
            log_warn "Forcing process termination..."
            echo "$CURSOR_PIDS" | xargs -r kill -9 2>/dev/null || true
        else
            echo "$CURSOR_PIDS" | xargs -r kill 2>/dev/null || true
        fi

        sleep 1

        if ! procs --no-header | rg -i "cursor" | rg -v "$(basename "$0")|grep|procs|rg|fzf" >/dev/null; then
            log_info "Cursor processes terminated successfully"
            return 0
        fi

        log_warn "Waiting for processes to terminate, attempt $attempt/$max_attempts..."
        ((attempt++))
    done

    log_error "Failed to terminate Cursor processes after $max_attempts attempts"
    get_process_details
    log_error "Please manually terminate the processes and try again"
    exit 1
}

# Backup system ID
backup_system_id() {
    log_info "Backing up system ID..."
    local system_id_file="$BACKUP_DIR/system_id.backup_$(date +%Y%m%d_%H%M%S)"

    mkdir -p "$BACKUP_DIR"

    {
        echo "# Original System ID Backup - $(date)" >"$system_id_file"
        echo "## Machine ID:" >>"$system_id_file"
        cat /etc/machine-id >>"$system_id_file"
        echo -e "\n## DMI System UUID:" >>"$system_id_file"
        dmidecode -s system-uuid >>"$system_id_file" 2>/dev/null || echo "N/A"

        chmod 444 "$system_id_file"
        chown "$CURRENT_USER" "$system_id_file"
        log_info "System ID backed up to: $system_id_file"
    } || {
        log_error "Failed to backup system ID"
        return 1
    }
}

# Backup configuration file
backup_config() {
    if [ ! -f "$STORAGE_FILE" ]; then
        log_warn "Configuration file not found, skipping backup"
        return 0
    fi

    mkdir -p "$BACKUP_DIR"
    local backup_file="$BACKUP_DIR/storage.json.backup_$(date +%Y%m%d_%H%M%S)"

    if cp "$STORAGE_FILE" "$backup_file"; then
        chmod 644 "$backup_file"
        chown "$CURRENT_USER" "$backup_file"
        log_info "Configuration backed up to: $backup_file"
    else
        log_error "Backup failed"
        exit 1
    fi
}

# Generate a random ID
generate_random_id() {
    head -c 32 /dev/urandom | xxd -p -c 32
}

# Generate a random UUID
generate_uuid() {
    uuidgen | tr '[:upper:]' '[:lower:]'
}

# Modify or add configuration entries
modify_or_add_config() {
    local key="$1"
    local value="$2"
    local file="$3"

    local key_escaped=$(sed 's/[\/&]/\\&/g' <<<"$key")
    local value_escaped=$(sed 's/[\/&]/\\&/g' <<<"$value")

    if [ ! -f "$file" ]; then
        log_error "File not found: $file"
        return 1
    fi

    if lsattr "$file" 2>/dev/null | grep -q '^....i'; then
        log_debug "Removing immutable attribute from file..."
        sudo chattr -i "$file" || {
            log_error "Failed to remove immutable attribute"
            return 1
        }
    fi

    chmod 644 "$file" || {
        log_error "Failed to change file permissions: $file"
        return 1
    }

    local temp_file=$(mktemp)

    if rg -q "\"$key\":" "$file"; then
        sed "s#\"${key_escaped}\":[[:space:]]*\"[^\"]*\"#\"${key_escaped}\": \"${value_escaped}\"#" "$file" >"$temp_file" || {
            log_error "Failed to modify configuration: $key"
            rm -f "$temp_file"
            return 1
        }
    else
        sed "s/}$/,\n    \"${key_escaped}\": \"${value_escaped}\"\n}/" "$file" >"$temp_file" || {
            log_error "Failed to add configuration: $key"
            rm -f "$temp_file"
            return 1
        }
    fi

    if [ ! -s "$temp_file" ]; then
        log_error "Temporary file is empty"
        rm -f "$temp_file"
        return 1
    fi

    cat "$temp_file" >"$file" || {
        log_error "Failed to write to file: $file"
        rm -f "$temp_file"
        return 1
    }

    rm -f "$temp_file"
    chmod 444 "$file"
    return 0
}

# Generate new configuration
generate_new_config() {
    log_info "Modifying system ID..."
    backup_system_id

    local new_machine_id=$(generate_random_id | cut -c1-32)

    if [ -f "/etc/machine-id" ]; then
        cp /etc/machine-id /etc/machine-id.backup
        echo "$new_machine_id" >/etc/machine-id
        log_info "System machine-id updated"
    fi

    local prefix_hex=$(echo -n "auth0|user_" | xxd -p)
    local random_part=$(generate_random_id)
    local machine_id="${prefix_hex}${random_part}"

    local mac_machine_id=$(generate_random_id)
    local device_id=$(generate_uuid | tr '[:upper:]' '[:lower:]')
    local sqm_id="{$(generate_uuid | tr '[:lower:]' '[:upper:]')}"

    log_info "Modifying configuration file..."

    # Ensure the directory exists and create storage.json if not present
    mkdir -p "$(dirname "$STORAGE_FILE")" || {
        log_error "Failed to create configuration directory"
        exit 1
    }

    if [ ! -f "$STORAGE_FILE" ]; then
        log_info "Configuration file not found, creating a new one: $STORAGE_FILE"
        echo '{}' >"$STORAGE_FILE" || {
            log_error "Failed to create configuration file"
            exit 1
        }
    fi

    modify_or_add_config "telemetry.machineId" "$machine_id" "$STORAGE_FILE" || exit 1
    modify_or_add_config "telemetry.macMachineId" "$mac_machine_id" "$STORAGE_FILE" || exit 1
    modify_or_add_config "telemetry.devDeviceId" "$device_id" "$STORAGE_FILE" || exit 1
    modify_or_add_config "telemetry.sqmId" "$sqm_id" "$STORAGE_FILE" || exit 1

    chmod 444 "$STORAGE_FILE"
    chown "$CURRENT_USER" "$STORAGE_FILE"

    if [ -w "$STORAGE_FILE" ]; then
        log_warn "Failed to set read-only permissions, attempting alternative method..."
        chattr +i "$STORAGE_FILE" 2>/dev/null || true
    else
        log_info "File permissions set to read-only successfully"
    fi

    echo
    log_info "Configuration updated: $STORAGE_FILE"
    log_debug "machineId: $machine_id"
    log_debug "macMachineId: $mac_machine_id"
    log_debug "devDeviceId: $device_id"
    log_debug "sqmId: $sqm_id"
}

# Display file tree structure
show_file_tree() {
    local base_dir=$(dirname "$STORAGE_FILE")
    echo
    log_info "File structure:"
    echo -e "${BLUE}$base_dir${NC}"
    echo "├── globalStorage"
    echo "│   ├── storage.json (modified)"
    echo "│   └── backups"

    if [ -d "$BACKUP_DIR" ]; then
        local backup_files=("$BACKUP_DIR"/*)
        if [ ${#backup_files[@]} -gt 0 ]; then
            for file in "${backup_files[@]}"; do
                if [ -f "$file" ]; then
                    echo "│       └── $(basename "$file")"
                fi
            done
        else
            echo "│       └── (empty)"
        fi
    fi
    echo
}

# Display additional info
show_follow_info() {
    echo
    echo -e "${GREEN}================================${NC}"
    echo -e "${YELLOW}  Follow the WeChat account [JianBingGuoZiJuanAI] for more Cursor tips and AI knowledge (script is free, join the group for additional tips) ${NC}"
    echo -e "${GREEN}================================${NC}"
    echo
}

# Disable auto-update functionality
disable_auto_update() {
    echo
    log_warn "Would you like to disable Cursor's auto-update feature?"
    echo "0) No - Keep default settings (press Enter)"
    echo "1) Yes - Disable auto-update"
    read -r choice

    if [ "$choice" = "1" ]; then
        echo
        log_info "Processing auto-update settings..."
        local updater_path="/home/${CURRENT_USER}/.config/cursor-updater"

        show_manual_guide() {
            echo
            log_warn "Automatic setup failed. Please follow these manual steps:"
            echo -e "${YELLOW}Steps to disable updates manually:${NC}"
            echo "1. Open a terminal"
            echo "2. Run the following command:"
            echo -e "${BLUE}rm -rf \"$updater_path\" && touch \"$updater_path\" && chmod 444 \"$updater_path\"${NC}"
            echo
            echo -e "${YELLOW}If you encounter a permissions error, use sudo:${NC}"
            echo -e "${BLUE}sudo rm -rf \"$updater_path\" && sudo touch \"$updater_path\" && sudo chmod 444 \"$updater_path\"${NC}"
            echo
            echo -e "${YELLOW}For extra protection (recommended):${NC}"
            echo -e "${BLUE}sudo chattr +i \"$updater_path\"${NC}"
            echo
            echo -e "${YELLOW}Verification steps:${NC}"
            echo "1. Run: ls -l \"$updater_path\""
            echo "2. Ensure permissions are r--r--r--"
            echo "3. Run: lsattr \"$updater_path\""
            echo "4. Confirm the 'i' attribute is present (if chattr was used)"
            echo
            log_warn "Restart Cursor after completing these steps"
        }

        if [ -d "$updater_path" ]; then
            rm -rf "$updater_path" 2>/dev/null || {
                log_error "Failed to remove cursor-updater directory"
                show_manual_guide
                return 1
            }
            log_info "Successfully removed cursor-updater directory"
        fi

        touch "$updater_path" 2>/dev/null || {
            log_error "Failed to create blocking file"
            show_manual_guide
            return 1
        }

        if ! chmod 444 "$updater_path" 2>/dev/null || ! chown "$CURRENT_USER:$CURRENT_USER" "$updater_path" 2>/dev/null; then
            log_error "Failed to set file permissions"
            show_manual_guide
            return 1
        fi

        if command -v chattr &>/dev/null; then
            chattr +i "$updater_path" 2>/dev/null || {
                log_warn "Failed to set chattr attribute"
                show_manual_guide
                return 1
            }
        fi

        if [ ! -f "$updater_path" ] || [ -w "$updater_path" ]; then
            log_error "Verification failed: File permissions may not have been applied"
            show_manual_guide
            return 1
        fi

        log_info "Auto-update successfully disabled"
    else
        log_info "Keeping default settings, no changes applied"
    fi
}

# Main function
main() {
    if [[ $(uname) != "Linux" ]]; then
        log_error "This script only supports Linux systems"
        exit 1
    fi

    clear
    echo -e "
    ██████╗██╗   ██╗██████╗ ███████╗ ██████╗ ██████╗ 
   ██╔════╝██║   ██║██╔══██╗██╔════╝██╔═══██╗██╔══██╗
   ██║     ██║   ██║██████╔╝███████╗██║   ██║██████╔╝
   ██║     ██║   ██║██╔══██╗╚════██║██║   ██║██╔══██╗
   ╚██████╗╚██████╔╝██║  ██║███████║╚██████╔╝██║  ██║
    ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝
    "
    echo -e "${BLUE}================================${NC}"
    echo -e "${GREEN}   Cursor Device ID Modifier Tool (Linux)  ${NC}"
    echo -e "${YELLOW}  Follow WeChat account [JianBingGuoZiJuanAI]     ${NC}"
    echo -e "${YELLOW}  For more Cursor tips and AI knowledge (free script, join group for more)  ${NC}"
    echo -e "${BLUE}================================${NC}"
    echo
    echo -e "${YELLOW}[Important Note]${NC} This tool supports Cursor v0.45.x"
    echo -e "${YELLOW}[Important Note]${NC} This tool is free. If you find it useful, follow [JianBingGuoZiJuanAI]"
    echo

    check_permissions
    check_and_kill_cursor
    backup_config
    generate_new_config
    show_file_tree
    show_follow_info

    disable_auto_update

    log_info "Please restart Cursor to apply the new configuration"
    show_follow_info
}

main
